--Use master
--drop DATABASE MyData
--CREATE DATABASE MyData
use MyData
--IF EXISTS ( SELECT [name] FROM sys.tables WHERE [name] = 'MyTransaction' 
--                                          or    [name] = 'Account'
--                                          or    [name] = 'Category'
--                                          or    [name] = 'Currency'
--                                          or    [name] = 'TransactionDetails'
--                                          or    [name] = 'RatesUsdRubTmp'
--                                          or    [name] = 'TransactionTmp'
--          )
DROP table MyTransaction, Account, Category, Currency, TransactionDetails, RatesUsdRub,TransactionTmp

--ELSE 
--BEGIN
	CREATE TABLE TransactionDetails 
	(
    	TransactionDetailsID int  NOT NULL  PRIMARY KEY IDENTITY(1,1),
    	TransactionDetailsName varchar(255)  NOT NULL UNIQUE
     
	)

	CREATE TABLE Currency 
	(
	    CurrencyID int  NOT NULL  PRIMARY KEY IDENTITY(1,1),
   		CurrencyName varchar(255)  NOT NULL UNIQUE
	)

	CREATE TABLE Account 
	(
    	AccountID int  NOT NULL PRIMARY KEY IDENTITY(1,1),
    	AccountName varchar(255)  NOT NULL, 
    	CurrencyID int not NULL FOREIGN KEY REFERENCES Currency(CurrencyID), 
    	Balance MONEY  DEFAULT 0
	)

	CREATE TABLE Category 
	(
    	CategoryID int  NOT NULL PRIMARY KEY IDENTITY(1,1),
    	CategoryName varchar(255)  NOT NULL, 
    	TransactionDetailsID int  NOT NULL FOREIGN KEY REFERENCES TransactionDetails(TransactionDetailsID)
	)

	CREATE TABLE MyTransaction
	(
    	MyTransactionID int  NOT NULL PRIMARY KEY IDENTITY(1,1),
    	DateTransaction DATE,   
    	CategoryID int  NOT NULL FOREIGN KEY REFERENCES Category(CategoryID),
    	Amount MONEY  DEFAULT 0,
    	AccountID int  NOT NULL FOREIGN KEY REFERENCES Account(AccountID)
    )
	CREATE TABLE  RatesUsdRub
	(
--		RatesID int NOT NULL PRIMARY KEY IDENTITY(1,1),
		RatesDate date,
		RatesRub  VARCHAR (10)
	)
	CREATE TABLE  TransactionTmp
	(
		TypeTMP VARCHAR (10),
		OperationName  VARCHAR (50),
		AmountMin FLOAT,
		AmountMax Float,
		CurrencyTmp VARCHAR (10),
		Rate INT,
		Period VARCHAR (10),
		AccountTmp VARCHAR (10)		
	)	
	
	
use MyData

	BULK INSERT RatesUsdRub  FROM '/var/backups/Rates1.csv'
	WITH 
	(
	  FIELDTERMINATOR = ';',
      ROWTERMINATOR = '0x0a'
    )
   
   ALTER TABLE  RatesUsdRub
   ADD RatesID int NOT NULL PRIMARY KEY IDENTITY(1,1)
 
    
    BULK INSERT TransactionTmp FROM '/var/backups/Transac.csv'
	WITH 
	(
	  FirstRow = 2,
	  FIELDTERMINATOR = ';',
      ROWTERMINATOR = '0x0a'
    )

     ALTER TABLE  TransactionTmp
     ADD TransactionTmpID int NOT NULL PRIMARY KEY IDENTITY(1,1)
	
INSERT INTO TransactionDetails (TransactionDetailsName)
SELECT typeTmp from TransactionTmp
GROUP BY typeTmp

INSERT INTO Category (CategoryName, TransactiondetailsID) 
SELECT TrTmp.OperationName, 
	   (
	     select  TrDet.TransactionDetailsID 
	     from TransactionDetails as TrDet 
	     WHERE TrDet.TransactionDetailsName =TrTmp.TypeTmp 
	   )  
from TransactionTmp as TrTmp 

INSERT INTO Currency (CurrencyName)
SELECT CurrencyTmp from TransactionTmp
GROUP BY CurrencyTmp



INSERT INTO Account (AccountName, CurrencyID)
SELECT Curs.AccountTmp, Curs.CurrencyID
--, Curs.rnd
 FROM
		(
			SELECT Cur.CurrencyID, TrTmp.CurrencyTmp, TrTmp.AccountTmp
--			, cast ( rand( cast ( newid() as varbinary(16) ) ) * 1000000 + 1 as int )  as rnd 
			FROM Currency as Cur, TransactionTmp as TrTmp
			Where Cur.CurrencyName=TrTmp.CurrencyTmp
			GROUP BY Cur.CurrencyID,TrTmp.CurrencyTmp, TrTmp.AccountTmp   
		) Curs

CREATE TABLE MyTransactionTmp
	(
--    	MyTransactionID int  NOT NULL PRIMARY KEY IDENTITY(1,1),
    	DateTransaction DATE,   
    	CategoryID int  NOT NULL FOREIGN KEY REFERENCES Category(CategoryID),
    	Amount MONEY  DEFAULT 0,
    	AccountID int  NOT NULL FOREIGN KEY REFERENCES Account(AccountID)
    )
		
--declare @i int;
declare	@i 						int; -- счетчик цикла для обхода таблицы тразакций, периодов и повторений
declare	@j 						int; -- счетчик цикла таблицы дат
declare	@k 						int; -- счетчик цикла повторений за период
declare @rateid					int; -- переменная для хранения RateID from RatesUsdRub
declare @p	 				    int; -- переменная для использования как признака посешения условия if последнего года
declare @AmountMax 				int;
declare @AmountMin 				int;
declare @rate	 				int; -- переменная для хранения числа повторений за период
declare @period	 				VARCHAR(50); -- переменная для хранения периода из таблицы транзакций и повторений
declare @dateinterval					int; -- 
declare @categoryid				int;
declare @accountid				int;

  set @j = 1; -- установка счетчика цикла для обхода таблицы тразакций, периодов и повторений
  WHILE @j<=(select COUNT(TransactionTmpID) From TransactionTmp) 
   	BEGIN
	  set @rate = (SELECT Rate FROM TransactionTmp WHERE TransactionTmpID = @j);
	  set @period = (SELECT Period FROM TransactionTmp WHERE TransactionTmpID = @j);
 
	set @dateinterval = CASE @period
				WHEN 'Week'  THEN  7
				WHEN 'month' THEN 30 
				WHEN 'Year'  THEN 365
			END;	
			
			                 SELECT @AmountMax=TrTmp.AmountMax, 
							        @AmountMin = TrTmp.AmountMin
		 		 			 from TransactionTmp as TrTmp 
		 		 			 WHERE TrTmp.TransactionTmpID = @j
		 		 			 
		 		 			 set @categoryid=(SELECT CategoryID 
										      FROM Category as Cat 
										      WHERE Cat.CAtegoryName = (
											          					SELECT OperationName 
											          					from TransactionTmp as TrTmp 
											          					WHERE TransactionTmpID = @j
											                           )
											 )
											 
							set @accountid= (
											  SELECT AccountID 
											  From Account as Ac
											  WHERE Ac.AccountName = (
											          				  SELECT AccountTmp 
											          				  from TransactionTmp as TrTmp 
											          				  WHERE TransactionTmpID = @j
											                         )
											 )
											 
	      			  set @i=1;  -- установка счетчика цикла таблицы дат
					  while @i<= (select COUNT(RatesId) From RatesUsdRub)
					   BEGIN			  
       								set @k=1; -- установка счетчика цикла повторений за период
		                            WHILE @k <= @rate 
		      						  BEGIN
			      			            set @rateid= FLOOR(@dateinterval*rand() + @i);
			      						INSERT INTO MyTransactionTmp (DateTransaction,CategoryId,Amount,AccountId) 
									    SELECT Rat.RatesDate,
											   @categoryid,
											   (FLOOR((@AmountMax-@AmountMin +1)*rand() + @AmountMin)),
											   @accountid  
											  FROM RatesUsdRub as Rat
											  WHERE Rat.RatesID = @rateid 
		      						    set @k = @k+1;  
		      						 END -- Begin For cikl rate     	
		      	        set @i=@i+@dateinterval;
		      			END -- цикла дат				  
	      					  
	         set @j = @j+1;                            							 
    End -- begin for cikl Transac,period 
	
Insert INTO MyTransaction (DateTransaction,CategoryId,Amount,AccountId)
SELECT * from MytransactionTmp as MT order BY Mt.DateTransaction

DROP TABLE MyTransactionTmp

